//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesManagementSystem.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalesManagementSystemEntities : DbContext
    {
        public SalesManagementSystemEntities()
            : base("name=SalesManagementSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Consultant> Consultants { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderLineItem> OrderLineItems { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Sex> Sexes { get; set; }
    
        [DbFunction("SalesManagementSystemEntities", "GetConsultantByFrequentlyAndProfitableProducts")]
        public virtual IQueryable<GetConsultantByFrequentlyAndProfitableProducts_Result> GetConsultantByFrequentlyAndProfitableProducts(Nullable<int> consultantId, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var consultantIdParameter = consultantId.HasValue ?
                new ObjectParameter("ConsultantId", consultantId) :
                new ObjectParameter("ConsultantId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetConsultantByFrequentlyAndProfitableProducts_Result>("[SalesManagementSystemEntities].[GetConsultantByFrequentlyAndProfitableProducts](@ConsultantId, @StartDate, @EndDate)", consultantIdParameter, startDateParameter, endDateParameter);
        }
    
        [DbFunction("SalesManagementSystemEntities", "GetConsultantSales")]
        public virtual IQueryable<GetConsultantSales_Result> GetConsultantSales(Nullable<int> consultantId, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var consultantIdParameter = consultantId.HasValue ?
                new ObjectParameter("ConsultantId", consultantId) :
                new ObjectParameter("ConsultantId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetConsultantSales_Result>("[SalesManagementSystemEntities].[GetConsultantSales](@ConsultantId, @StartDate, @EndDate)", consultantIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetConsultantsByFrequentlyAndProfitableProducts_Result> GetConsultantsByFrequentlyAndProfitableProducts(Nullable<System.DateTimeOffset> startDateProvided, Nullable<System.DateTimeOffset> endDateProvided)
        {
            var startDateProvidedParameter = startDateProvided.HasValue ?
                new ObjectParameter("StartDateProvided", startDateProvided) :
                new ObjectParameter("StartDateProvided", typeof(System.DateTimeOffset));
    
            var endDateProvidedParameter = endDateProvided.HasValue ?
                new ObjectParameter("EndDateProvided", endDateProvided) :
                new ObjectParameter("EndDateProvided", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsultantsByFrequentlyAndProfitableProducts_Result>("GetConsultantsByFrequentlyAndProfitableProducts", startDateProvidedParameter, endDateProvidedParameter);
        }
    
        public virtual ObjectResult<GetConsultantsByFrequentlySoldProduct_Result> GetConsultantsByFrequentlySoldProduct(Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate, Nullable<int> productCode, Nullable<int> productMinAmount)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var productMinAmountParameter = productMinAmount.HasValue ?
                new ObjectParameter("ProductMinAmount", productMinAmount) :
                new ObjectParameter("ProductMinAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsultantsByFrequentlySoldProduct_Result>("GetConsultantsByFrequentlySoldProduct", startDateParameter, endDateParameter, productCodeParameter, productMinAmountParameter);
        }
    
        public virtual ObjectResult<GetConsultantsSales_Result> GetConsultantsSales(Nullable<System.DateTimeOffset> startDateProvided, Nullable<System.DateTimeOffset> endDateProvided)
        {
            var startDateProvidedParameter = startDateProvided.HasValue ?
                new ObjectParameter("StartDateProvided", startDateProvided) :
                new ObjectParameter("StartDateProvided", typeof(System.DateTimeOffset));
    
            var endDateProvidedParameter = endDateProvided.HasValue ?
                new ObjectParameter("EndDateProvided", endDateProvided) :
                new ObjectParameter("EndDateProvided", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsultantsSales_Result>("GetConsultantsSales", startDateProvidedParameter, endDateProvidedParameter);
        }
    
        public virtual ObjectResult<GetOrdersByConsultant_Result> GetOrdersByConsultant(Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersByConsultant_Result>("GetOrdersByConsultant", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetOrdersByProductPrice_Result> GetOrdersByProductPrice(Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate, Nullable<decimal> minPrice, Nullable<decimal> maxPrice)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("MinPrice", minPrice) :
                new ObjectParameter("MinPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersByProductPrice_Result>("GetOrdersByProductPrice", startDateParameter, endDateParameter, minPriceParameter, maxPriceParameter);
        }
    
        public virtual ObjectResult<GetConsultantsSales2_Result> GetConsultantsSales2(Nullable<System.DateTimeOffset> startDateProvided, Nullable<System.DateTimeOffset> endDateProvided)
        {
            var startDateProvidedParameter = startDateProvided.HasValue ?
                new ObjectParameter("StartDateProvided", startDateProvided) :
                new ObjectParameter("StartDateProvided", typeof(System.DateTimeOffset));
    
            var endDateProvidedParameter = endDateProvided.HasValue ?
                new ObjectParameter("EndDateProvided", endDateProvided) :
                new ObjectParameter("EndDateProvided", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsultantsSales2_Result>("GetConsultantsSales2", startDateProvidedParameter, endDateProvidedParameter);
        }
    }
}
